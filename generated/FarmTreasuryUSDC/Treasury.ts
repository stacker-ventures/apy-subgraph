// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get depositor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get referral(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ProfitDeclared extends ethereum.Event {
  get params(): ProfitDeclared__Params {
    return new ProfitDeclared__Params(this);
  }
}

export class ProfitDeclared__Params {
  _event: ProfitDeclared;

  constructor(event: ProfitDeclared) {
    this._event = event;
  }

  get profit(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalAmountInPool(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalSharesInPool(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get performanceFeeTotal(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get baseFeeTotal(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class RebalanceHot extends ethereum.Event {
  get params(): RebalanceHot__Params {
    return new RebalanceHot__Params(this);
  }
}

export class RebalanceHot__Params {
  _event: RebalanceHot;

  constructor(event: RebalanceHot) {
    this._event = event;
  }

  get amountIn(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amountToFarmer(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get withdrawer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Treasury__rebalanceDownResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Treasury__rebalanceUpResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Treasury__userDepositsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Treasury extends ethereum.SmartContract {
  static bind(address: Address): Treasury {
    return new Treasury("Treasury", address);
  }

  ACTIVELY_FARMED(): BigInt {
    let result = super.call(
      "ACTIVELY_FARMED",
      "ACTIVELY_FARMED():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ACTIVELY_FARMED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ACTIVELY_FARMED",
      "ACTIVELY_FARMED():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(_owner: Address, _spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    _owner: Address,
    _spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(_owner), ethereum.Value.fromAddress(_spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(_spender: Address, _amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(
    _spender: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_spender),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(_account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseToFarmer(): BigInt {
    let result = super.call("baseToFarmer", "baseToFarmer():(uint256)", []);

    return result[0].toBigInt();
  }

  try_baseToFarmer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseToFarmer", "baseToFarmer():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseToTreasury(): BigInt {
    let result = super.call("baseToTreasury", "baseToTreasury():(uint256)", []);

    return result[0].toBigInt();
  }

  try_baseToTreasury(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "baseToTreasury",
      "baseToTreasury():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  farmBoss(): Address {
    let result = super.call("farmBoss", "farmBoss():(address)", []);

    return result[0].toAddress();
  }

  try_farmBoss(): ethereum.CallResult<Address> {
    let result = super.tryCall("farmBoss", "farmBoss():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLockedAmount(_account: Address): BigInt {
    let result = super.call(
      "getLockedAmount",
      "getLockedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );

    return result[0].toBigInt();
  }

  try_getLockedAmount(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLockedAmount",
      "getLockedAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSharesForUnderlying(_amountUnderlying: BigInt): BigInt {
    let result = super.call(
      "getSharesForUnderlying",
      "getSharesForUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountUnderlying)]
    );

    return result[0].toBigInt();
  }

  try_getSharesForUnderlying(
    _amountUnderlying: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSharesForUnderlying",
      "getSharesForUnderlying(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountUnderlying)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnderlyingForShares(_amountShares: BigInt): BigInt {
    let result = super.call(
      "getUnderlyingForShares",
      "getUnderlyingForShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountShares)]
    );

    return result[0].toBigInt();
  }

  try_getUnderlyingForShares(
    _amountShares: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnderlyingForShares",
      "getUnderlyingForShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountShares)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hotWalletHoldings(): BigInt {
    let result = super.call(
      "hotWalletHoldings",
      "hotWalletHoldings():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_hotWalletHoldings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "hotWalletHoldings",
      "hotWalletHoldings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastRebalanceUpTime(): BigInt {
    let result = super.call(
      "lastRebalanceUpTime",
      "lastRebalanceUpTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastRebalanceUpTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastRebalanceUpTime",
      "lastRebalanceUpTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  max(): BigInt {
    let result = super.call("max", "max():(uint256)", []);

    return result[0].toBigInt();
  }

  try_max(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("max", "max():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  noLockWhitelist(param0: Address): boolean {
    let result = super.call(
      "noLockWhitelist",
      "noLockWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_noLockWhitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "noLockWhitelist",
      "noLockWhitelist(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pausedDeposits(): boolean {
    let result = super.call("pausedDeposits", "pausedDeposits():(bool)", []);

    return result[0].toBoolean();
  }

  try_pausedDeposits(): ethereum.CallResult<boolean> {
    let result = super.tryCall("pausedDeposits", "pausedDeposits():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  performanceToFarmer(): BigInt {
    let result = super.call(
      "performanceToFarmer",
      "performanceToFarmer():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_performanceToFarmer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceToFarmer",
      "performanceToFarmer():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  performanceToTreasury(): BigInt {
    let result = super.call(
      "performanceToTreasury",
      "performanceToTreasury():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_performanceToTreasury(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "performanceToTreasury",
      "performanceToTreasury():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalanceDown(
    _amount: BigInt,
    _rebalanceHotWallet: boolean
  ): Treasury__rebalanceDownResult {
    let result = super.call(
      "rebalanceDown",
      "rebalanceDown(uint256,bool):(bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_rebalanceHotWallet)
      ]
    );

    return new Treasury__rebalanceDownResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_rebalanceDown(
    _amount: BigInt,
    _rebalanceHotWallet: boolean
  ): ethereum.CallResult<Treasury__rebalanceDownResult> {
    let result = super.tryCall(
      "rebalanceDown",
      "rebalanceDown(uint256,bool):(bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromBoolean(_rebalanceHotWallet)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Treasury__rebalanceDownResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  rebalanceUp(
    _amount: BigInt,
    _farmerRewards: Address
  ): Treasury__rebalanceUpResult {
    let result = super.call(
      "rebalanceUp",
      "rebalanceUp(uint256,address):(bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_farmerRewards)
      ]
    );

    return new Treasury__rebalanceUpResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_rebalanceUp(
    _amount: BigInt,
    _farmerRewards: Address
  ): ethereum.CallResult<Treasury__rebalanceUpResult> {
    let result = super.tryCall(
      "rebalanceUp",
      "rebalanceUp(uint256,address):(bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromAddress(_farmerRewards)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Treasury__rebalanceUpResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }

  rebalanceUpLimit(): BigInt {
    let result = super.call(
      "rebalanceUpLimit",
      "rebalanceUpLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebalanceUpLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebalanceUpLimit",
      "rebalanceUpLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rebalanceUpWaitTime(): BigInt {
    let result = super.call(
      "rebalanceUpWaitTime",
      "rebalanceUpWaitTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_rebalanceUpWaitTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rebalanceUpWaitTime",
      "rebalanceUpWaitTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sharesOf(_account: Address): BigInt {
    let result = super.call("sharesOf", "sharesOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBigInt();
  }

  try_sharesOf(_account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sharesOf", "sharesOf(address):(uint256)", [
      ethereum.Value.fromAddress(_account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalUnderlying(): BigInt {
    let result = super.call(
      "totalUnderlying",
      "totalUnderlying():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalUnderlying(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalUnderlying",
      "totalUnderlying():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(_recipient: Address, _amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_recipient),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    _recipient: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_recipient),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(
    _sender: Address,
    _recipient: Address,
    _amount: BigInt
  ): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    _sender: Address,
    _recipient: Address,
    _amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_sender),
        ethereum.Value.fromAddress(_recipient),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  underlying(): string {
    let result = super.call("underlying", "underlying():(string)", []);

    return result[0].toString();
  }

  try_underlying(): ethereum.CallResult<string> {
    let result = super.tryCall("underlying", "underlying():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  underlyingContract(): Address {
    let result = super.call(
      "underlyingContract",
      "underlyingContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_underlyingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "underlyingContract",
      "underlyingContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userDeposits(param0: Address): Treasury__userDepositsResult {
    let result = super.call(
      "userDeposits",
      "userDeposits(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Treasury__userDepositsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userDeposits(
    param0: Address
  ): ethereum.CallResult<Treasury__userDepositsResult> {
    let result = super.tryCall(
      "userDeposits",
      "userDeposits(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Treasury__userDepositsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  waitPeriod(): BigInt {
    let result = super.call("waitPeriod", "waitPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_waitPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("waitPeriod", "waitPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nameUnderlying(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _decimalsUnderlying(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _underlying(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _amountUnderlying(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _referral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositETHCall extends ethereum.Call {
  get inputs(): DepositETHCall__Inputs {
    return new DepositETHCall__Inputs(this);
  }

  get outputs(): DepositETHCall__Outputs {
    return new DepositETHCall__Outputs(this);
  }
}

export class DepositETHCall__Inputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }

  get _referral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DepositETHCall__Outputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseDepositsCall extends ethereum.Call {
  get inputs(): PauseDepositsCall__Inputs {
    return new PauseDepositsCall__Inputs(this);
  }

  get outputs(): PauseDepositsCall__Outputs {
    return new PauseDepositsCall__Outputs(this);
  }
}

export class PauseDepositsCall__Inputs {
  _call: PauseDepositsCall;

  constructor(call: PauseDepositsCall) {
    this._call = call;
  }
}

export class PauseDepositsCall__Outputs {
  _call: PauseDepositsCall;

  constructor(call: PauseDepositsCall) {
    this._call = call;
  }
}

export class RebalanceDownCall extends ethereum.Call {
  get inputs(): RebalanceDownCall__Inputs {
    return new RebalanceDownCall__Inputs(this);
  }

  get outputs(): RebalanceDownCall__Outputs {
    return new RebalanceDownCall__Outputs(this);
  }
}

export class RebalanceDownCall__Inputs {
  _call: RebalanceDownCall;

  constructor(call: RebalanceDownCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _rebalanceHotWallet(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RebalanceDownCall__Outputs {
  _call: RebalanceDownCall;

  constructor(call: RebalanceDownCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RebalanceUpCall extends ethereum.Call {
  get inputs(): RebalanceUpCall__Inputs {
    return new RebalanceUpCall__Inputs(this);
  }

  get outputs(): RebalanceUpCall__Outputs {
    return new RebalanceUpCall__Outputs(this);
  }
}

export class RebalanceUpCall__Inputs {
  _call: RebalanceUpCall;

  constructor(call: RebalanceUpCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _farmerRewards(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RebalanceUpCall__Outputs {
  _call: RebalanceUpCall;

  constructor(call: RebalanceUpCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RescueCall extends ethereum.Call {
  get inputs(): RescueCall__Inputs {
    return new RescueCall__Inputs(this);
  }

  get outputs(): RescueCall__Outputs {
    return new RescueCall__Outputs(this);
  }
}

export class RescueCall__Inputs {
  _call: RescueCall;

  constructor(call: RescueCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RescueCall__Outputs {
  _call: RescueCall;

  constructor(call: RescueCall) {
    this._call = call;
  }
}

export class SetFarmBossCall extends ethereum.Call {
  get inputs(): SetFarmBossCall__Inputs {
    return new SetFarmBossCall__Inputs(this);
  }

  get outputs(): SetFarmBossCall__Outputs {
    return new SetFarmBossCall__Outputs(this);
  }
}

export class SetFarmBossCall__Inputs {
  _call: SetFarmBossCall;

  constructor(call: SetFarmBossCall) {
    this._call = call;
  }

  get _new(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFarmBossCall__Outputs {
  _call: SetFarmBossCall;

  constructor(call: SetFarmBossCall) {
    this._call = call;
  }
}

export class SetFeeDistributionCall extends ethereum.Call {
  get inputs(): SetFeeDistributionCall__Inputs {
    return new SetFeeDistributionCall__Inputs(this);
  }

  get outputs(): SetFeeDistributionCall__Outputs {
    return new SetFeeDistributionCall__Outputs(this);
  }
}

export class SetFeeDistributionCall__Inputs {
  _call: SetFeeDistributionCall;

  constructor(call: SetFeeDistributionCall) {
    this._call = call;
  }

  get _performanceToTreasury(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _performanceToFarmer(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _baseToTreasury(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _baseToFarmer(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SetFeeDistributionCall__Outputs {
  _call: SetFeeDistributionCall;

  constructor(call: SetFeeDistributionCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get _new(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class SetHotWalletHoldingsCall extends ethereum.Call {
  get inputs(): SetHotWalletHoldingsCall__Inputs {
    return new SetHotWalletHoldingsCall__Inputs(this);
  }

  get outputs(): SetHotWalletHoldingsCall__Outputs {
    return new SetHotWalletHoldingsCall__Outputs(this);
  }
}

export class SetHotWalletHoldingsCall__Inputs {
  _call: SetHotWalletHoldingsCall;

  constructor(call: SetHotWalletHoldingsCall) {
    this._call = call;
  }

  get _new(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetHotWalletHoldingsCall__Outputs {
  _call: SetHotWalletHoldingsCall;

  constructor(call: SetHotWalletHoldingsCall) {
    this._call = call;
  }
}

export class SetNoLockWhitelistCall extends ethereum.Call {
  get inputs(): SetNoLockWhitelistCall__Inputs {
    return new SetNoLockWhitelistCall__Inputs(this);
  }

  get outputs(): SetNoLockWhitelistCall__Outputs {
    return new SetNoLockWhitelistCall__Outputs(this);
  }
}

export class SetNoLockWhitelistCall__Inputs {
  _call: SetNoLockWhitelistCall;

  constructor(call: SetNoLockWhitelistCall) {
    this._call = call;
  }

  get _accounts(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _noLock(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }
}

export class SetNoLockWhitelistCall__Outputs {
  _call: SetNoLockWhitelistCall;

  constructor(call: SetNoLockWhitelistCall) {
    this._call = call;
  }
}

export class SetRebalanceUpLimitCall extends ethereum.Call {
  get inputs(): SetRebalanceUpLimitCall__Inputs {
    return new SetRebalanceUpLimitCall__Inputs(this);
  }

  get outputs(): SetRebalanceUpLimitCall__Outputs {
    return new SetRebalanceUpLimitCall__Outputs(this);
  }
}

export class SetRebalanceUpLimitCall__Inputs {
  _call: SetRebalanceUpLimitCall;

  constructor(call: SetRebalanceUpLimitCall) {
    this._call = call;
  }

  get _new(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebalanceUpLimitCall__Outputs {
  _call: SetRebalanceUpLimitCall;

  constructor(call: SetRebalanceUpLimitCall) {
    this._call = call;
  }
}

export class SetRebalanceUpWaitTimeCall extends ethereum.Call {
  get inputs(): SetRebalanceUpWaitTimeCall__Inputs {
    return new SetRebalanceUpWaitTimeCall__Inputs(this);
  }

  get outputs(): SetRebalanceUpWaitTimeCall__Outputs {
    return new SetRebalanceUpWaitTimeCall__Outputs(this);
  }
}

export class SetRebalanceUpWaitTimeCall__Inputs {
  _call: SetRebalanceUpWaitTimeCall;

  constructor(call: SetRebalanceUpWaitTimeCall) {
    this._call = call;
  }

  get _new(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRebalanceUpWaitTimeCall__Outputs {
  _call: SetRebalanceUpWaitTimeCall;

  constructor(call: SetRebalanceUpWaitTimeCall) {
    this._call = call;
  }
}

export class SetWaitPeriodCall extends ethereum.Call {
  get inputs(): SetWaitPeriodCall__Inputs {
    return new SetWaitPeriodCall__Inputs(this);
  }

  get outputs(): SetWaitPeriodCall__Outputs {
    return new SetWaitPeriodCall__Outputs(this);
  }
}

export class SetWaitPeriodCall__Inputs {
  _call: SetWaitPeriodCall;

  constructor(call: SetWaitPeriodCall) {
    this._call = call;
  }

  get _new(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWaitPeriodCall__Outputs {
  _call: SetWaitPeriodCall;

  constructor(call: SetWaitPeriodCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseDepositsCall extends ethereum.Call {
  get inputs(): UnpauseDepositsCall__Inputs {
    return new UnpauseDepositsCall__Inputs(this);
  }

  get outputs(): UnpauseDepositsCall__Outputs {
    return new UnpauseDepositsCall__Outputs(this);
  }
}

export class UnpauseDepositsCall__Inputs {
  _call: UnpauseDepositsCall;

  constructor(call: UnpauseDepositsCall) {
    this._call = call;
  }
}

export class UnpauseDepositsCall__Outputs {
  _call: UnpauseDepositsCall;

  constructor(call: UnpauseDepositsCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amountUnderlying(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawETHCall extends ethereum.Call {
  get inputs(): WithdrawETHCall__Inputs {
    return new WithdrawETHCall__Inputs(this);
  }

  get outputs(): WithdrawETHCall__Outputs {
    return new WithdrawETHCall__Outputs(this);
  }
}

export class WithdrawETHCall__Inputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }

  get _amountUnderlying(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawETHCall__Outputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }
}
